---
title: masonry
---

<p><code>masonry</code> is the default layout mode.  It works by placing elements in optimal position based on available vertical space, sort of like a mason fitting stones in a wall. <code>masonry</code> uses the same code from the <a href="http://masonry.desandro.com">Masonry library</a>.</p> 

<div class="big-demo go-wide">
  <div class="grid js-isotope" data-isotope-options='{ "masonry": { "columnWidth": 110 } }'>
    {{> grid-splash-items}}
  </div>
  {{#codepens.masonryBasic}}
    {{> edit-demo}}
  {{/codepens.masonryBasic}}
</div>

{{! --------------------------------------------------- }}

<h2>Options</h2>

{{! --------------------------------------------------- }}

<h3>columnWidth</h3>

<div class="param">
  <p class="param__bit param__bit--type">
    <span class="param__bit__title">Type:</span>
    <span class="param__bit__value">
      <i>Number</i>, <i>Element</i>, or Selector <i>String</i>
    </span>
  </p>
</div>

<p>Aligns items to a horizontal grid.</p>

<div class="call-out">
  <p>We recommend setting <code>columnWidth</code>. If <code>columnWidth</code> is not set, Isotope will use the outer width of the first item.</p>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    masonry: {
      columnWidth: 50
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid js-isotope"
      data-isotope-options='{ "masonry": { "columnWidth": 50 } }'>
      {{> grid-items}}
    </div>
    {{#codepens.masonryBasic}}
      {{> edit-demo}}
    {{/codepens.masonryBasic}}
  </div>
</div>

<p>Use <a href="../options.html#element-sizing">element sizing</a> for responsive layouts with percentage widths, . Set <code>columnWidth</code> to an <i>Element</i> or Selector <i>String</i> to use the outer width of the element.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- .grid-sizer empty element, only used for element sizing -->
      <div class="grid-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    /* 2 columns wide */
    .grid-item--width2 { width: 40%; }
    ```

    ``` js
    $('.grid').isotope({
      itemSelector: '.grid-item',
      percentPosition: true,
      masonry: {
        // use outer width of grid-sizer for columnWidth
        columnWidth: '.grid-sizer'
      }
    })
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col js-isotope"
      data-isotope-options='{ "masonry": { "columnWidth": ".grid-sizer" }, "itemSelector": ".grid-item", "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items-fewer}}
    </div>
    {{#codepens.masonryFluid}}
      {{> edit-demo}}
    {{/codepens.masonryFluid}}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>gutter</h3>

<div class="param">
  <p class="param__bit param__bit--type">
    <span class="param__bit__title">Type:</span>
    <span class="param__bit__value"><i>Number</i>, <i>Element</i>, or Selector <i>String</i></span>
  </p>
</div>

<p>The horizontal space between item elements.</p>

<div class="duo example">
  <div class="duo__cell example__code">
``` js
masonry: {
  columnWidth: 50,
  gutter: 10
}
```
``` css
.masonry-gutter .mini-item.w2 {
  width: 110px;
}
```
  </div>
  <div class="duo__cell example__demo masonry-gutter">
    <div class="isotope js-isotope" data-isotope-options='{ "masonry": { "columnWidth": 50, "gutter": 10 } }'>
      {{>mini-demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/dHsCJ">Edit this example on CodePen</a></p>
  </div>
</div>

<p>To set vertical space between elements, use <code>margin</code> CSS.</p>

<div class="duo example">
  <div class="duo__cell example__code">
``` js
masonry: {
  columnWidth: 50,
  gutter: 10
}
```
``` css
#masonry-bottom-spaced .mini-item {
  margin-bottom: 10px;
}
#masonry-bottom-spaced .mini-item.h2 {
  height: 110px;
}
```
  </div>
  <div class="duo__cell example__demo masonry-gutter">
    <div id="masonry-bottom-spaced" class="isotope js-isotope " data-isotope-options='{ "masonry": { "columnWidth": 50, "gutter": 10 } }'>
      {{>mini-demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/sqrwo">Edit this example on CodePen</a></p>
  </div>
</div>

<p>If set to an <i>Element</i> or Selector <i>String</i>, Masonry will use the width of that element. See <a href="../options.html#element-sizing">Element sizing</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
``` html
<div class="isotope">
  <div class="grid-sizer"></div>
  <div class="gutter-sizer"></div>
  <div class="mini-item"></div>
  <div class="mini-item"></div>
  ...
</div>
```
``` css
.grid-sizer,
.mini-item { width: 22%; }
.mini-item.w2 { width: 48%; }
.gutter-sizer { width: 4%; }
```
``` js
masonry: {
  columnWidth: '.grid-sizer',
  gutter: '.gutter-sizer'
},
itemSelector: '.mini-item',
percentPosition: true
```
  </div>
  <div class="duo__cell example__demo">
    <div class="isotope js-isotope flex-4-col-gutter" data-isotope-options='{ "itemSelector": ".mini-item", "percentPosition": true, "masonry": { "columnWidth": ".grid-sizer", "gutter": ".gutter-sizer" } }'>
      <div class="grid-sizer"></div>
      <div class="gutter-sizer"></div>
      {{>mini-demo-items}}
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/aEmkl">Edit this example on CodePen</a></p>
  </div>
</div>


<h2>isFitWidth</h2>

<div class="param">
  <p class="param__bit param__bit--type">
    <span class="param__bit__title">Type:</span>
    <span class="param__bit__value"><i>Boolean</i></span>
  </p>
  <p class="param-bit default">
    <span class="param__bit__title">Default:</span>
    <span class="param__bit__value"><code><span class="literal">false</span></code></span>
  </p>
</div>

<p>Sets the width of the container to fit the available number of columns, based the size of container's parent element. When enabled, you can center the container with CSS.</p>

<div class="warning">
  <p>isFitWidth does not work with <a href="../options.html#element-sizing">element sizing</a> <em>and</em> percentage width. Either columnWidth needs to be set to a fixed size, like <code>columnWidth: 120</code>, or items need to have a fixed size in pixels, like <code>width: 120px</code>. Otherwise, the container and item widths will collapse on one another.</p>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
``` js
masonry: {
  columnWidth: 100,
  isFitWidth: true
}
```
``` css
/* center container with CSS */
#masonry-fit-width .isotope {
  margin: 0 auto;
}
```
  </div>
  <div id="masonry-fit-width" class="duo__cell example__demo">
    <div class="isotope js-isotope" data-isotope-options='{ "masonry": { "columnWidth": 100, "isFitWidth": true }, "itemSelector": ".mini-item" }'>
      <div class="mini-item w2"></div>
      <div class="mini-item w2 h2"></div>
      <div class="mini-item w2 h2"></div>
      <div class="mini-item w2"></div>
      <div class="mini-item w2 h2"></div>
      <div class="mini-item w2 h2"></div>
      <div class="mini-item w2"></div>
      <div class="mini-item w2 h2"></div>
    </div>
    <p class="edit"><a href="http://codepen.io/desandro/pen/BptxJ">Edit this example on CodePen</a></p>
  </div>
</div>
