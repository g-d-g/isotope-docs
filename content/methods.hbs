---
title: Methods
---

<p>Methods are actions done by Isotope instances.</p>

<p>With jQuery, methods follow the jQuery UI pattern <code>.isotope( <span class="string">'methodName'</span> <span class="comment">/*, arguments */</span> )</code>.</p>

``` js
$grid.isotope()
  .append( elem )
  .isotope( 'appended', elem )
  .isotope('layout');
```

<div class="call-out">
  <p>jQuery chaining is broken by methods that return values like
    <a href="#getitemelements"><code>getItemElements</code></a>.</p>
</div>

<p>Vanilla JavaScript methods look like <code>isotope.methodName( <span class="comment">/* arguments */</span> )</code>. Unlike jQuery methods, they cannot be chained together.</p>

``` js
// vanilla JS
var iso = new Isotope('.grid');
container.appendChild( elem );
iso.appended( elem );
iso.layout();
```

{{! --------------------------------------------------- }}

<h2>Arranging and layout</h2>

{{! --------------------------------------------------- }}

<h3>arrange / .isotope()</h3>

<p>Filters, sorts, and lays out items. <code>arrange</code> is the principle method of Isotope. It is the default method with jQuery <code>.isotope()</code>. Pass in <a href="options.html"><code>options</code></a> to apply filtering and sorting.</p>

``` js
// jQuery
$grid.isotope( options )
// vanilla JS
iso.arrange( options )
```

<p class="variable">
  <code class="variable__code">options</code>
  <span class="variable__type">Object</span>
</p>

``` js
// filter metal, sort by number, and layout
$grid.isotope({
  filter: '.metal',
  sortBy: 'number'
});
// triggering method without options will
// re-apply filtering, sorting, and layout
$grid.isotope();
```

``` js
// vanilla JS
iso.arrange({
  filter: '.metal',
  sortBy: 'number'
})
// re-apply filtering, sorting, and layout
iso.arrange();
```

{{! --------------------------------------------------- }}

<h3>layout</h3>

<p>Lays out all item elements. <code>layout</code> is useful when an item has changed size, and all items need to be laid out again. <code>layout</code> does not apply filtering or sorting.</p>

``` js
// jQuery
$grid.isotope('layout')
// vanilla JS
iso.layout()
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var $grid = $('.grid').isotope({
      masonry: {
        columnWidth: 50
      }
    });
    // change size of item by toggling gigante class
    $grid.on( 'click', '.grid-item', function() {
      $(this).toggleClass('gigante');
      // trigger layout after item size changes
      $grid.isotope('layout');
    });
    ```
  </div>
  {{> layout-demo}}
</div>

{{! --------------------------------------------------- }}

<h3>layoutItems</h3>

<p>Lays out specified items.</p>

``` js
// jQuery
$grid.isotope( 'layoutItems', items, isStill )
// vanilla JS
iso.layoutItems( items, isStill )
```

<p class="variable">
  <code class="variable__code">items</code>
  <span class="variable__type"><i>Array</i> of <i>Isotope.Item</i>s</span>
</p>

<p class="variable">
  <code class="variable__code">isStill</code>
  <span class="variable__type"><i>Boolean</i></span>
  <span class="variable__description">Disables transitions</span>
</p>

{{! --------------------------------------------------- }}

<h3>updateSortData</h3>

<p>Updates sort data.</p>

``` js
// jQuery
$grid.isotope( 'updateSortData', elements )
// vanilla JS
iso.updateSortData( elements )
```

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
  <span class="variable__description">Optional</span>
</p>

{{! --------------------------------------------------- }}

<h3>shuffle</h3>

<p>Shuffles items in a random order.</p>

``` js
// jQuery
$grid.isotope('shuffle')
// vanilla JS
iso.shuffle()
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $('.shuffle-button').on( 'click', function() {
      $grid.isotope('shuffle');
    });
    ```
  </div>
  {{> shuffle}}
</div>

{{! --------------------------------------------------- }}

<h3>stamp</h3>

<p>Stamps elements in the layout. Isotope will lay out item elements <em>around</em> stamped elements.</p>

``` js
// jQuery
$grid.isotope( 'stamp', elements )
// vanilla JS
iso.stamp( elements )
```

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

<p>Stamping is only supported by some layout modes: <a href="layout-modes/masonry.html">masonry</a>, <a href="layout-modes/packery.html">packery</a> and <a href="layout-modes/masonryhorizontal.html">masonryhorizontal</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var $grid = $('.grid').isotope({
      // specify itemSelector so stamps do get laid out
      itemSelector: '.grid-item',
      masonry: {
        columnWidth: 50
      }
    });
    var $stampElem = $demo.find('.stamp');
    var isStamped = false;

    $('.stamp-button').on( 'click', function() {
      // stamp or unstamp element
      if ( isStamped ) {
        $grid.isotope( 'unstamp', $stampElem );
      } else {
        $grid.isotope( 'stamp', $stampElem );
      }
      // trigger layout
      $grid.isotope('layout');
      // set flag
      isStamped = !isStamped;
    });
    ```
  </div>
  {{> stamp-methods}}
</div>

{{! --------------------------------------------------- }}

<h3>unstamp</h3>

``` js
// jQuery
$grid.isotope( 'unstamp', elements )
// vanilla JS
iso.unstamp( elements )
```

<p>Un-stamps elements in the layout, so that Isotope will no longer layout item elements around them. <a href="#stamp">See demo above</a>.</p>

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

{{! --------------------------------------------------- }}

<h3>hideItemElements</h3>

<p>Hide items.</p>

``` js
// jQuery
$grid.isotope( 'hideItemElements', elements )
// vanilla JS
iso.hideItemElements( elements )
```

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

{{! --------------------------------------------------- }}

<h3>revealItemElements</h3>

<p>Reveals hidden items.</p>

``` js
// jQuery
$grid.isotope( 'revealItemElements', elements )
// vanilla JS
iso.revealItemElements( elements )
```

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

{{! --------------------------------------------------- }}

<h2>Adding and removing items</h2>

{{! --------------------------------------------------- }}

<h3>appended</h3>

``` js
// jQuery
$grid.isotope( 'appended', elements )
// vanilla JS
iso.appended( elements )
```

<p>Adds and lays out newly appended item elements to the end of the layout.</p>

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $('.append-button').on( 'click', function() {
      // create new item elements
      var $items = $('<div class="grid-item">...</div>');
      // append items to grid
      $grid.append( $items )
        // add and lay out newly appended items
        .isotope( 'appended', $items );
    });
    ```
  </div>
  {{> appended}}
</div>

{{! --------------------------------------------------- }}

<h3>prepended</h3>

<p>Adds and lays out newly prepended item elements at the beginning of layout.</p>

``` js
// jQuery
iso.prepended( elements )
// vanilla JS
$grid.isotope( 'prepended', elements )
```

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $('.prepend-button').on( 'click', function() {
      // create new item elements
      var $items = $('<div class="grid-item">...</div>');
      // prepend items to grid
      $grid.prepend( $items )
        // add and lay out newly prepended items
        .isotope( 'prepended', $items );
    });
    ```
  </div>
  {{> prepended}}
</div>

{{! --------------------------------------------------- }}

<h3>insert</h3>

``` js
// jQuery
$grid.isotope( 'insert', elements )
// vanilla JS
iso.insert( elements )
```

<p>Appends elements into container element, adds elements as items, and arranges items with filtering and sorting.</p>

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var $grid = $('grid').isotope({
      masonry: {
        columnWidth: 50
      },
      // filter items with odd numbers
      filter: function() {
        var number = $( this ).find('.number').text();
        return parseInt( number, 10 ) % 2;
      },
      // sort by number
      sortBy: 'number',
      getSortData: {
        'number': '.number parseInt'
      }
    });

    $('.insert-button').on( 'click', function() {
      // create new item elements
      var elems = [];
      for ( var i = 0; i < 3; i++ ) {
        var $elem = $('<div class="grid-item" />');
        // set number
        var num = Math.floor( Math.random() * 100 );
        $elem.append( '<p class="number">' + num + '</p>' );
        elems.push( $elem[0] );
      }
      // insert new elements
      $grid.isotope( 'insert', elems );
    });
    ```
  </div>
  {{> insert}}
</div>

{{! --------------------------------------------------- }}

<h3>addItems</h3>

``` js
// jQuery
$grid.isotope( 'addItems', elements )
// vanilla JS
iso.addItems( elements )
```

<p>Adds item elements to the Isotope instance. <code>addItems</code> does not lay out items like <a href="#appended"><code>appended</code></a>, <a href="#prepended"><code>prepended</code></a>, or <a href="#insert"><code>insert</code></a>.</p>

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

{{! --------------------------------------------------- }}

<h3>remove</h3>

``` js
// jQuery
$grid.isotope( 'remove', elements )
// vanilla JS
iso.remove( elements )
```

<p>Removes elements from the Isotope instance and DOM.</p>

<p class="variable">
  <code class="variable__code">elements</code>
  <span class="variable__type">
    <i>Element</i>,
    <i>jQuery</i> Object,
    <i>NodeList</i>, or
    <i>Array</i> of Elements
  </span>
</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $grid.on( 'click', '.grid-item', function() {
      // remove clicked element
      $grid.isotope( 'remove', this )
        // layout remaining item elements
        .isotope('layout');
    });
    ```
  </div>
  {{> remove}}
</div>

{{! --------------------------------------------------- }}

<h2>Utilities</h2>

{{! --------------------------------------------------- }}

<h3>reloadItems</h3>

<p>Recollects all item elements.</p>

<p>For frameworks like Angular and React, <code>reloadItems</code> may be useful to apply changes to the DOM to Isotope.</p>

``` js
// jQuery
$grid.isotope('reloadItems')
// vanilla JS
iso.reloadItems()
```

{{! --------------------------------------------------- }}

<h3>destroy</h3>

<p>Removes the Isotope functionality completely. <code>destroy</code> will return the element back to its pre-initialized state.</p>

``` js
// jQuery
$grid.isotope('destroy')
// vanilla JS
iso.destroy()
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    var isoOptions = {
      masonry: {
        columnWidth: 50
      }
    };
    // initialize Isotope
    var $grid = $('.grid').isotope( isoOptions );
    var isActive = true;

    $('.toggle-button').on( 'click', function() {
      if ( isActive ) {
        $grid.isotope('destroy'); // destroy
      } else {
        $grid.isotope( isoOptions ); // re-initialize
      }
      // set flag
      isActive = !isActive;
    });
    ```
  </div>
  {{> destroy}}
</div>

{{! --------------------------------------------------- }}

<h3>getItemElements</h3>

<p>Returns an array of all item elements in the Isotope instance.</p>

``` js
// jQuery
var elems = $grid.isotope('getItemElements')
// vanilla JS
var elems = iso.getItemElements()
```

<p class="variable">
  <code class="variable__code">elems</code>
  <span class="variable__type"><i>Array</i> of <i>Element</i>s</span>
</p>

{{! --------------------------------------------------- }}

<h3>getFilteredItemElements</h3>

<p>Returns an array of filtered item elements in current sorted order.</p>

``` js
// jQuery
var elems = $grid.isotope('getFilteredItemElements')
// vanilla JS
var elems = iso.getFilteredItemElements()
```

<p class="variable">
  <code class="variable__code">elems</code>
  <span class="variable__type"><i>Array</i> of <i>Element</i>s</span>
</p>

{{! --------------------------------------------------- }}

<h3>jQuery.fn.data('isotope')</h3>

<p>Get the Isotope instance from a jQuery object. Isotope instances are useful to access Isotope properties.</p>

``` js
var iso = $('.grid').data('isotope')
// access Isotope properties
console.log( iso.filteredItems.length + ' filtered items'  )
```

{{! --------------------------------------------------- }}

<h3>Isotope.data</h3>

<p>Get the Isotope instance via its element. <code>Isotope.data()</code> is useful for getting the Isotope instance in JavaScript, after it has been initalized in HTML.</p>

``` js
var iso = Isotope.data( element )
```

<p class="variable">
  <code class="variable__code">element</code>
  <span class="variable__type"><i>Element</i> or Selector <i>String</i></span>
</p>

<p class="variable">
  <code class="variable__code">iso</code>
  <span class="variable__type"><i>Isotope</i></span>
</p>

``` html
<!-- init Isotope in HTML -->
<div class="grid" data-isotope='{...}'>...</div>
```

``` js
// jQuery
// pass in the element, $element[0], not the jQuery object
var iso = Isotope.data( $('.grid')[0] )

// vanilla JS
// using an element
var grid = document.querySelector('.grid')
var iso = Isotope.data( grid )
// using a selector string
var iso = Isotope.data('.grid')
```

{{! --------------------------------------------------- }}
