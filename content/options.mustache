---
title: Options
---

<p>All options are optional, but <a href="#itemselector"><code>itemSelector</code></a> is recommended. <a href="layout-modes.html#layout-mode-options">Layout modes have their own separate options</a>.</p>

``` js
// with jQuery
var $grid = $('.grid').isotope({
  itemSelector: '.grid-item',
  getSortData: {
    name: '.name',
    category: '[data-category]'
  },
  // layout mode options
  masonry: {
    columnWidth: 200
  }
});
```
``` js
// with vanilla JS
var iso = new Isotope( '.grid', {
  itemSelector: '.grid-item',
  getSortData: {
    name: '.name',
    category: '[data-category]'
  },
  masonry: {
    columnWidth: 200
  }
});

```
``` html
<!-- in HTML -->
<div class="grid" data-isotope='{ "itemSelector": ".grid-item", "getSortData": { "name": ".name", "category": "[data-category]" }, "masonry": { "columnWidth": 200 } }'>
```

<h2>Recommended</h2>

<h3>itemSelector</h3>

<p>Specifies which child elements will be used as item elements in the layout.</p>

<p>We recommend always setting <code>itemSelector</code>. <code>itemSelector</code> is useful to exclude <a href="#element-sizing">sizing elements</a> or other elements that are not part of the layout.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    itemSelector: '.grid-item'
    ```

    ``` html
    <div class="grid">
      <!-- do not use banner in Isotope layout -->
      <div class="static-banner">Static banner</div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      ...
    </div>
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--has-banner"
      data-isotope='{ "itemSelector": ".grid-item", "masonry": { "columnWidth": 50 }}'>
      <div class="static-banner">Static banner</div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="yNOdxr" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h2>Layout</h2>

<h3>layoutMode</h3>

<p>Sets the layout mode used to position items. Default is
  <code><span class="comment">layoutMode: 'masonry'</span></code>
  See <a href="layout-modes.html">Layout modes</a>.</p>

{{! --------------------------------------------------- }}

<h3>percentPosition</h3>

<p>Sets item positions in percent values, rather than pixel values. <code>percentPosition: <span class="literal">true</span></code> works well with percent-width items, as items will not transition their position on resize.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $('.grid').isotope({
      percentPosition: true,
      itemSelector: '.grid-item',
      masonry: {
        columnWidth: '.grid-sizer'
      }
    })
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col" data-isotope='{ "masonry": { "columnWidth": ".grid-sizer" }, "itemSelector": ".grid-item", "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items-fewer}}
    </div>
    {{> edit-demo default="mIkhq" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>Element sizing</h3>

<p>Sizing options like <a href="layout-modes/masonry.html#columnwidth"><code>masonry: columnWidth</code></a>, <a href="layout-modes/masonry.html#gutter"><code>masonry: gutter</code></a>, and <a href="layout-modes/packery.html#columnwidth"><code>packery: columnWidth</code></a> can be set with an element. The size of the element is then used as the value of the option.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- width of .grid-sizer used for columnWidth -->
      <div class="grid-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    /* 2 columns */
    .grid-item--width2 { width: 40%; }
    ```

    ``` js
    $('.grid').isotope({
      // set itemSelector so .grid-sizer is not used in layout
      itemSelector: '.grid-item',
      percentPosition: true,
      masonry: {
        // set to the element
        columnWidth: '.grid-sizer'
      }
    })
    ```
  </div>
  <div class="duo__cell examle__demo">
    <div class="grid grid--fluid-5-col" data-isotope='{ "masonry": { "columnWidth": ".grid-sizer" }, "itemSelector": ".grid-item", "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items-fewer}}
    </div>

    {{> edit-demo default="mIkhq" }}
  </div>
</div>

<p>The option can be set to a Selector <i>String</i> or an <i>Element</i>.</p>

``` js
// set to a selector string
// first matching element within container element will be used
masonry: {
  columnWidth: '.grid-sizer'
}

// set to an element
masonry: {
  columnWidth: $grid.find('.grid-sizer')[0]
}
```

<p>Element sizing options allow you to control the sizing of the Isotope layout within your CSS. This is useful for responsive layouts and media queries.</p>

``` css
/* 3 columns by default */
.grid-sizer { width: 33.333%; }

@media screen and (min-width: 768px) {
  /* 5 columns for larger screens */
  .grid-sizer { width: 20%; }
}
```

{{! --------------------------------------------------- }}

<h3>stamp</h3>

<p>Specifies which elements are <em>stamped</em> within the layout. Isotope will layout items around stamped elements.</p>

<p>The <a href="layout-modes/masonry.html">masonry</a>, <a href="layout-modes/packery.html">packery</a>, and <a href="layout-modes/masonryhorizontal.html">masonryHorizontal</a> layout modes support stamping.</p>

<p>The <code>stamp</code> option stamps elements only when the Isotope instance is first initialized. You can stamp additional elements afterwards with the <a href="methods.html#stamp"><code>stamp</code> method</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="stamp stamp1"></div>
      <div class="stamp stamp2"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      ....
    </div>
    ```

    ``` js
    // specify itemSelector so stamps do get laid out
    itemSelector: '.grid-item',
    // stamp elements
    stamp: '.stamp'
    ```

    ``` css
    /* position stamp elements with CSS */
    .grid {
      position: relative;
    }
    .stamp {
      position: absolute;
      background: orange;
      border: 4px dotted black;
    }
    .stamp1 {
      left: 30%;
      top: 10px;
      width: 20%;
      height: 100px;
    }
    .stamp2 {
      right: 10%;
      top: 20px;
      width: 70%;
      height: 30px;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--has-stamp" data-isotope='{ "itemSelector": ".grid-item", "stamp": ".stamp", "masonry": { "columnWidth": 50 } }'>
      <div class="stamp stamp--stamp-option-stamp1"></div>
      <div class="stamp stamp--stamp-option-stamp2"></div>
      {{> grid-items}}
    </div>

    {{> edit-demo default="jfhnx" }}
  </div>
</div>

<p><code>stamp</code> can be set to a Selector <i>String</i>, <i>Element</i>, or an <i>Array</i>-like object of <i>Element</i>s.</p>

``` js
// selector string
stamp: '.stamp'

// single element
stamp: $grid.find('.stamp')[0]

// multiple elements
stamp: $grid.find('.stamp')
```

{{! --------------------------------------------------- }}

<h3>originLeft</h3>

<p>Controls the horizontal flow of the layout. By default, item elements start positioning at the left, with <code><span class="comment">originLeft: true</span></code>. Set <code>originLeft: <span class="literal">false</span></code> for right-to-left layouts.</p>

<p><code>originLeft</code> was previously <code>isOriginLeft</code> in Isotope v2. <code>isOriginLeft</code> will still work in Isotope v3.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    originLeft: false
    ```
  </div>
  <div class="duo__cell example__code">
    <div class="grid grid--counting" data-isotope='{ "originLeft": false, "masonry": { "columnWidth": 50 } }'>
      {{> grid-items}}
    </div>

    {{> edit-demo default="gadFJ" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>originTop</h3>

<p>Controls the vertical flow of the layout. By default, item elements start positioning at the top. Set to <code><span class="literal">false</span></code> for bottom-up layouts. It&rsquo;s like Tetris!</p>

<p><code>originTop</code> was previously <code>isOriginTop</code> in Isotope v2. <code>isOriginTop</code> will still work in Isotope v3.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    originTop: false
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--counting" data-isotope='{ "originTop": false }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="kxFJH" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h2>Filtering</h2>

<h3>filter</h3>

<p>Shows items that match the filter and hides items that do not match. See <a href="filtering.html">Filtering</a>.</p>

<p>If set to a string, that value is used as a <a href="filtering.html#selectors">selector</a>.</p>

``` js
$grid.isotope({ filter: '.selector' });
```

<p>If <a href="filtering.html#functions"><code>filter</code> is set to a function</a>, that function checks each item and returns <code>true</code> or <code>false</code> if the item should be shown or hidden.</p>

``` js
$grid.isotope({
  // filter element with numbers greater than 50
  filter: function() {
    // _this_ is the item element. Get text of element's .number
    var number = $(this).find('.number').text();
    // return true to show, false to hide
    return parseInt( number, 10 ) > 50;
  }
});
```

{{! --------------------------------------------------- }}

<h2>Sorting</h2>

{{! --------------------------------------------------- }}

<h3>getSortData</h3>

<p>Isotope reads data from HTML with the <code>getSortData</code> option. See <a href="sorting.html#getsortdata">Sorting: <code>getSortData</code></a>.</p>

<p><code>getSortData</code> is set with an object. The object&rsquo;s keys are keywords used to sort by. Object values are either a shortcut string or function to retrieve the data.</p>

``` js
var $grid = $('.grid').isotope({
  getSortData: {
    name: '.name', // text from querySelector
    category: '[data-category]', // value of attribute
    weight: function( itemElem ) { // function
      var weight = $( itemElem ).find('.weight').text();
      return parseFloat( weight.replace( /[\(\)]/g, '') );
    }
  }
});
```

{{! --------------------------------------------------- }}

<h3>sortBy</h3>

<p>Sorts items according to which property of <code>getSortData</code>. See <a href="sorting.html#sortby">Sorting: <code>sortBy</code></a>. The value of <code>sortBy</code> needs to match a key name in <code>getSortData</code>.</p>

``` js
$grid.isotope({
  getSortData: {
    number: '.number parseInt'
  },
  sortBy : 'number'
});
```

{{! **needs demo** }}

<p>Two additional <code>sortBy</code> options are built in.</p>

``` js
$grid.isotope({ sortBy : 'original-order' });
// original order of the item elements

$grid.isotope({ sortBy : 'random' });
// random order
```

<p>To sort by multiple properties, you can set <code>sortBy</code> to an array of key names.</p>

``` js
// sort by color, then number
sortBy: [ 'color', 'number' ]
```

{{! --------------------------------------------------- }}

<h3>sortAscending</h3>

<p>Sorts items ascendingly if <code>sortAscending: <span class="literal">true</span></code> &ldquo;A, B, C&hellip;&rdquo;, &ldquo;1, 2, 3&hellip;&rdquo;, or descendingly if <code>sortAscending: <span class="literal">false</span></code>, &ldquo;Z, Y, X&hellip;&rdquo;, &ldquo;9, 8, 7&hellip;&rdquo;.</p>

``` js
// sort by number, highest number first
$grid.isotope({
  sortBy: 'number',
  sortAscending: false
});
```

{{! **needs demo** }}

<p>You can set ascending order for each <code>sortBy</code> value by setting <code>sortAscending</code> to an object.</p>

``` js
sortAscending: {
  name: true, // name ascendingly
  weight: false, // weight descendingly
  category: true, // category ascendingly
  number: false // number descendingly
}
```

{{! **needs demo** }}

{{! --------------------------------------------------- }}

<h2>Transitions</h2>

{{! --------------------------------------------------- }}

<h3>stagger</h3>

<p>Staggers item transitions, so items transition incrementally after one another. Set as a CSS time format, <code><span class="string">'0.03s'</span></code>, or as a number in milliseconds, <code><span class="number">30</span></code>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    stagger: 30
    // stagger item transitions 30ms after one another
    ```
  </div>
  {{> stagger }}
</div>

{{! --------------------------------------------------- }}

<h3>transitionDuration</h3>

<p>Duration of the transition when items change position or appearance, set in a CSS time format, or as a number in milliseconds. Default: <code><span class="comment">transitionDuration: '0.4s'</span></code></p>

``` js
// fast transitions
transitionDuration: '0.2s'

// slow transitions
transitionDuration: '0.8s'

// no transitions
transitionDuration: 0

// 0.4s in milliseconds
transitionDuration: 400
```

{{! **needs demo** }}

{{! --------------------------------------------------- }}

<h3>hiddenStyle &amp; visibleStyle</h3>

<p>The styles applied to hide and reveal items when filtering.</p>

``` js
/* default
hiddenStyle: {
  opacity: 0,
  transform: 'scale(0.001)'
},
visibleStyle: {
  opacity: 1,
  transform: 'scale(1)'
}
*/
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    $grid.isotope({
      // disable scale transform transition when hiding
      hiddenStyle: {
        opacity: 0
      },
      visibleStyle: {
        opacity: 1
      }
    })
    ```
  </div>

  {{> visible-hidden-style }}
</div>

{{! --------------------------------------------------- }}

<h2>Setup</h2>

{{! --------------------------------------------------- }}

<h3>containerStyle</h3>

<p>CSS styles that are applied to the container element. Def</p>

``` js
// default
// containerStyle: { position: 'relative' }

// disable any styles being set on container
// useful if using absolute position on container
containerStyle: null
```

{{! --------------------------------------------------- }}


<h3>resize</h3>

<p>Adjusts sizes and positions when window is resized. Enabled by default <code><span class="comment">resize: true</span></code>.</p>

<p><code>resize</code> was previously <code>isResizeBound</code> in Isotope v2. <code>isResizeBound</code> will still work in Isotope v3.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    resize: false
    ```

    ``` css
    /* grid has fixed width */
    .grid {
      width: 304px;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fixed-width" data-isotope='{ "resize": false, "masonry": { "columnWidth": 50 }}'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="LVNKab" }}
  </div>
</div>

{{! --------------------------------------------------- }}

<h3>initLayout</h3>

<p>Enables layout on initialization.
  Enabled by default <code><span class="comment">initLayout: true</span></code>.</p>

<p>Set <code>initLayout: <span class="literal">false</span></code> to disable layout on initialization, so you can use <a href="methods.html">methods</a> or add <a href="events.html">events</a> before the initial layout.</p>

<p><code>initLayout</code> was previously <code>isInitLayout</code> in Isotope v2. <code>isInitLayout</code> will still work in Isotope v3.</p>

``` js
var $grid = $('.grid').isotope({
  // disable initial layout
  initLayout: false
});
// bind event
$grid.isotope( 'on', 'arrangeComplete', function() {
  console.log('arrange is complete');
});
// manually trigger initial layout
$grid.isotope();
```

{{> edit-demo default="doXbZL" }}
