---
title: Sorting
---

<p>Isotope can rearrange the order of item elements based on their data.</p>

{{> sorting-demo}}

{{! --------------------------------------------------- }}

<h2>HTML</h2>

<p>All the data used for sorting can be set in the HTML. For the example at the top of the page, each item element has several data points that can be used for sorting.</p>

``` html
<div class="grid">
  <div class="element-item transition metal" data-category="transition">
    <p class="number">79</p>
    <h3 class="symbol">Au</h3>
    <h2 class="name">Gold</h2>
    <p class="weight">196.966569</p>
  </div>
  <div class="element-item metalloid" data-category="metalloid">
    <p class="number">51</p>
    <h3 class="symbol">Sb</h3>
    <h2 class="name">Antimony</h2>
    <p class="weight">121.76</p>
  </div>
  ...
</div>
```

{{! --------------------------------------------------- }}

<h2>getSortData</h2>

<p>Isotope reads data from HTML with the <code>getSortData</code> option. <code>getSortData</code> is set with an object. The object&rsquo;s keys are keywords used to sort by. Object values are either a shortcut string or function to retrieve the data.</p>

``` js
var $grid = $('.grid').isotope({
  getSortData: {
    name: '.name', // text from querySelector
    category: '[data-category]', // value of attribute
    weight: function( itemElem ) { // function
      var weight = $( itemElem ).find('.weight').text();
      return parseFloat( weight.replace( /[\(\)]/g, '') );
    }
  }
});
```

{{! --------------------------------------------------- }}

<h3>getSortData strings</h3>

<p>When a <code>getSortData</code> value is set to a string, the string will be used as a query selector to get the text of a child element for each item element by default.</p>

``` js
name: '.name', // use text of .name element
symbol: '.symbol' // use text of .symbol
```

<p>A string wrapped in brackets, like <code><span class="string">'[attribute]'</span></code>, will be used to get the value of an attribute.</p>

``` js
// use value of data-category attribute
category: '[data-category]'
```

<p>Data values can be parsed into numbers by adding parser keywords to the shortcut string.</p>

``` js
// parse text of .number as an integer
number: '.number parseInt',
// parse text of .weight as a float
weight: '.weight parseFloat'
```

{{! --------------------------------------------------- }}

<h3>getSortData functions</h3>

<p><code>getSortData</code> values can be set to a function. This function is used on each item element to get data. The function provides one parameter <code>itemElem</code>, which is the item element. The function needs to return the data point.</p>

``` js
weight: function( itemElem ) {
  // get text of .weight element
  var weight = $( itemElem ).find('.weight').text();
  // replace parens (), and parse as float
  return parseFloat( weight.replace( /[\(\)]/g, '') );
}
```

{{! --------------------------------------------------- }}

<h2>sortBy</h2>

<p>For every property set in <code>getSortData</code>, Isotope can use it for sorting with the <code>sortBy</code> option. The value of <code>sortBy</code> needs to match a key in <code>getSortData</code>. With the properties above, <code>sortBy</code> can be set to
  <code><span class="string">'name'</span></code>,
  <code><span class="string">'symbol'</span></code>,
  <code><span class="string">'number'</span></code>,
  <code><span class="string">'weight'</span></code>, and
  <code><span class="string">'category'</span></code>.
</p>

``` js
$grid.isotope({ sortBy : 'symbol' });
```

<p>Two additional <code>sortBy</code> options are built in.</p>

``` js
$grid.isotope({ sortBy : 'original-order' });
// original order of the item elements

$grid.isotope({ sortBy : 'random' });
// random order
```

{{! --------------------------------------------------- }}

<h3>Multiple sortBy</h3>

<p>To sort by multiple properties, you can set <code>sortBy</code> to an array. For example, <code>sortBy: [ <span class="string">'color'</span>, <span class="string">'number'</span> ]</code> will sort items by color, <em>then</em> by number.</p>

<div class="duo example go-wide">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="grid-item" data-color="yellow">
        <p class="number">3</p>
      </div>
      <div class="grid-item" data-color="blue">
        <p class="number">2</p>
      </div>
      ...
    </div>
    ```

    ``` js
    var $grid = $('.grid').isotope({
      getSortData: {
        color: '[data-color]',
        number: '.number parseInt'
      },
      // sort by color then number
      sortBy: [ 'color', 'number' ]
    });
    ```
  </div>

  {{> multiple-sort-by}}

</div>

{{! --------------------------------------------------- }}

<h2>sortAscending</h2>

<p>By default, Isotope sorts ascendingly: A, B, C and 1, 2, 3. To sort descendingly Z, Y, X, and 9, 8, 7, set <code>sortAscending: <span class="literal">false</span></code>.</p>

``` js
// sort highest number first
$grid.isotope({
  sortBy: 'number',
  sortAscending: false
});
```

<p><code>sortAscending</code> can also be set with an object, so that you can set ascending order for each <code>sortBy</code> value.</p>

``` js
$grid.isotope({
  sortAscending: {
    name: true,
    weight: false,
    category: true,
    number: false
  }
});
```

{{! --------------------------------------------------- }}

<h2>updateSortData</h2>

<p>To update sort data after a change has been made to item elements, use the <a href="methods.html#updatesortdata"><code>updateSortData</code> method</a>.</p>

``` js
$grid.isotope('updateSortData').isotope();
```


<h2>UI</h2>

<p>Let&rsquo;s use a group of buttons for the UI.</p>

``` html
<div class="button-group sort-by-button-group">
  <button data-sort-by="original-order">original order</button>
  <button data-sort-by="name">name</button>
  <button data-sort-by="symbol">symbol</button>
  <button data-sort-by="number">number</button>
  <button data-sort-by="weight">weight</button>
  <button data-sort-by="category">category</button>
</div>
```

<p>Each button has its <code>sortBy</code> value set in the <code>data-sort-by</code> attribute. In the JS, we can use that value when a button is clicked.</p>

``` js
// init Isotope
var $grid = $grid.isotope({
  getSortData: {
    name: '.name',
    symbol: '.symbol',
    number: '.number parseInt',
    category: '[data-category]',
    weight: function( itemElem ) {
      var weight = $( itemElem ).find('.weight').text();
      return parseFloat( weight.replace( /[\(\)]/g, '') );
    }
  }
});

// sort items on button click
$('.sort-by-button-group').on( 'click', 'button', function() {
  var sortByValue = $(this).attr('data-sort-by');
  $grid.isotope({ sortBy: sortByValue });
});
```
